//customer logs in
//marketplace opens
product name - store name - price
product name - store name - price
etc
//customer selects product
//he is taken to the product page which shows
description - quantity available
//customer selects to buy, quantity decreases

- Customers can view the overall marketplace listing products for sale, search for specific products using terms that match the name, store, or description,
and sort the marketplace on price or quantity available. 
- Customers can purchase items from the product page and review a history of their previously purchased items. 

Customers can view a dashboard with store and seller information.
Data will include a list of stores by number of products sold and a list of stores by the products purchased by that particular customer. 
Customers can choose to sort the dashboard.
Customers can export a file with their purchase history.  

________________

Sellers can elect to hold sales that reduce the price of a product until a specified number of units are sold. Customers will be informed of the original and sale price when browsing the marketplace. 

________________
seller
Sellers can view a dashboard that lists statistics for each of their stores.
Data will include a list of customers with the number of items that they have purchased and a list of products with the number of sales. 
Sellers can choose to sort the dashboard.
Sellers can import or export products for their stores using a csv file. 
All product details should be included, with one row per product. 


_______________
Customer dashboard

Store name, products sold (total), products I(customer) bought
Store name, products sold (total), products I(customer) bought
etc


_______________
Seller dashboard(could choose to sort - im guessing this means to either show customers or products(see below))

Store name

customer name, quantity bought
customer name, quantity bought
etc
product name, quantity sold
product name, quantity sold
etc

________________
test cases - for each class/ alternatively could do main method and write down all the expected input and output

@Test(timeout = 1000)
public void testExpectedOne() {
    // Set the input        
    // Separate each input with a newline (\n). 
    String input = "Line One\nLine Two\n"; 

    // Pair the input with the expected result
    String expected = "Insert the expected output here" 

    // Runs the program with the input values
    // Replace TestProgram with the name of the class with the main method
    receiveInput(input);
    TestProgram.main(new String[0]);

    // Retrieves the output from the program
    String stuOut = getOutput();

    // Trims the output and verifies it is correct. 
    stuOut = stuOut.replace("\r\n", "\n");
    assertEquals("Error message if output is incorrect, customize as needed",
                    expected.trim(), stuOut.trim());

}
